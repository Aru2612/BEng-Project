function [phi_d,phi_p] = fcn(l)
N=9;
d=23/2/1000;
r=20.5/1000;
error_tol=1/1000;
phi_d=zeros(N,1);
phi_p=zeros(N,1);
%Numerical iteration to find solution
for n=1:N
    if rem(n,2)==0
        delta_3n_0=(12*(round(((3*n)-1)/3)+1)+120*((3*n)-1)+90)*pi/180;
        delta_3n_1=(12*(round(((3*n-1)-1)/3)+1)+120*((3*n-1)-1)+90)*pi/180;
        delta_3n_2=(12*(round(((3*n-2)-1)/3)+1)+120*((3*n-2)-1)+90)*pi/180;
    else
        delta_3n_0=(12*(round(((3*n)-1)/3)+1)+120*((3*n)-1))*pi/180;
        delta_3n_1=(12*(round(((3*n-1)-1)/3)+1)+120*((3*n-1)-1))*pi/180;
        delta_3n_2=(12*(round(((3*n-2)-1)/3)+1)+120*((3*n-2)-1))*pi/180;
    end

    c_delta_3n_0=cos(delta_3n_0);
    s_delta_3n_0=sin(delta_3n_0);
    c_delta_3n_1=cos(delta_3n_1);
    s_delta_3n_1=sin(delta_3n_1);
    c_delta_3n_2=cos(delta_3n_2);
    s_delta_3n_2=sin(delta_3n_2);
   
   l_d=l(3*n-2:3*n,n);
   
   phi_j=[0;0];
   
   for j=0:10000
       s_d=sin(phi_j(1));
       s_p=sin(phi_j(2));
       c_p=cos(phi_j(2));
       c_d=cos(phi_j(1));
       l_j=[((d*s_p + r*c_p*c_delta_3n_0 - r*c_delta_3n_0)^2+...
                    (r*s_d*s_p*c_delta_3n_0 + r*c_d*s_delta_3n_0 - d*s_d*c_p - r*s_delta_3n_2)^2+...
                    (r*s_d*s_delta_3n_0 - r*c_delta_3n_0*c_d*s_p + d*c_d*c_p + d)^2)^(0.5);...
            ((d*s_p + r*c_p*c_delta_3n_0 - r*c_delta_3n_0)^2+...
                    (r*s_d*s_p*c_delta_3n_0 + r*c_d*s_delta_3n_0 - d*s_d*c_p - r*s_delta_3n_1)^2+...
                    (r*s_d*s_delta_3n_0 - r*c_delta_3n_0*c_d*s_p + d*c_d*c_p + d)^2)^(0.5);...
            ((d*s_p + r*c_p*c_delta_3n_0 - r*c_delta_3n_0)^2+...
                    (r*s_d*s_p*c_delta_3n_0 + r*c_d*s_delta_3n_0 - d*s_d*c_p - r*s_delta_3n_0)^2+...
                    (r*s_d*s_delta_3n_0 - r*c_delta_3n_0*c_d*s_p + d*c_d*c_p + d)^2)^(0.5)];
       delta_l=l_d-l_j;
       
       if (delta_l(1)<=error_tol) && (delta_l(2)<=error_tol) && (delta_l(3)<=error_tol)
           phi_d(n)=phi_j(1);
           phi_p(n)=phi_j(2);
           break;
       end
       
        dl_3n_0_dp=0.5*((d*s_p + r*c_p*c_delta_3n_0 - r*c_delta_3n_0)^2+...
                    (r*s_d*s_p*c_delta_3n_0 + r*c_d*s_delta_3n_0 - d*s_d*c_p - r*s_delta_3n_0)^2+...
                    (r*s_d*s_delta_3n_0 - r*c_delta_3n_0*c_d*s_p + d*c_d*c_p + d)^2)^(-0.5)*...
                    (2*(d*s_p + r*c_p*c_delta_3n_0 - r*c_delta_3n_0)*(d*c_p - r*s_p*c_delta_3n_0 - r*c_delta_3n_0)+...
                    2*(r*s_d*s_p*c_delta_3n_0 + r*c_d*s_delta_3n_0 - d*s_d*c_p - r*s_delta_3n_0)*(r*c_delta_3n_0*s_d*c_p + d*s_d*s_p)+...
                    2*(r*s_d*s_delta_3n_0 - r*c_delta_3n_0*c_d*s_p + d*c_d*c_p + d)*(- r*c_d*c_p*c_delta_3n_0 - d*c_d*s_p));
                
        dl_3n_0_dd=0.5*((d*s_p + r*c_p*c_delta_3n_0 - r*c_delta_3n_0)^2+...
                    (r*s_d*s_p*c_delta_3n_0 + r*c_d*s_delta_3n_0 - d*s_d*c_p - r*s_delta_3n_0)^2+...
                    (r*s_d*s_delta_3n_0 - r*c_delta_3n_0*c_d*s_p + d*c_d*c_p + d)^2)^(-0.5)*...
                    (2*(d*s_p + r*c_p*c_delta_3n_0 - r*c_delta_3n_0)*(0)+...
                    2*(r*s_d*s_p*c_delta_3n_0 + r*c_d*s_delta_3n_0 - d*s_d*c_p - r*s_delta_3n_0)*(-r*c_delta_3n_0*c_d*c_p - d*c_d*s_p)+...
                    2*(r*s_d*s_delta_3n_0 - r*c_delta_3n_0*c_d*s_p + d*c_d*c_p + d)*(r*c_d*s_delta_3n_0 + r*c_delta_3n_0*s_d*s_p - d*s_d*c_p));    
                     
        dl_3n_1_dp=0.5*((d*s_p + r*c_p*c_delta_3n_1 - r*c_delta_3n_1)^2+...
                    (r*s_d*s_p*c_delta_3n_1 + r*c_d*s_delta_3n_1 - d*s_d*c_p - r*s_delta_3n_1)^2+...
                    (r*s_d*s_delta_3n_1 - r*c_delta_3n_1*c_d*s_p + d*c_d*c_p + d)^2)^(-0.5)*...
                    (2*(d*s_p + r*c_p*c_delta_3n_1 - r*c_delta_3n_1)*(d*c_p - r*s_p*c_delta_3n_1 - r*c_delta_3n_1)+...
                     2*(r*s_d*s_p*c_delta_3n_1 + r*c_d*s_delta_3n_1 - d*s_d*c_p - r*s_delta_3n_1)*(r*c_delta_3n_1*s_d*c_p + d*s_d*s_p)+...
                     2*(r*s_d*s_delta_3n_1 - r*c_delta_3n_1*c_d*s_p + d*c_d*c_p + d)*(- r*c_d*c_p*c_delta_3n_1 - d*c_d*s_p));
                 
       dl_3n_1_dd=0.5*((d*s_p + r*c_p*c_delta_3n_1 - r*c_delta_3n_1)^2+...
                    (r*s_d*s_p*c_delta_3n_1 + r*c_d*s_delta_3n_1 - d*s_d*c_p - r*s_delta_3n_1)^2+...
                    (r*s_d*s_delta_3n_1 - r*c_delta_3n_1*c_d*s_p + d*c_d*c_p + d)^2)^(-0.5)*...
                    (2*(d*s_p + r*c_p*c_delta_3n_1 - r*c_delta_3n_1)*(0)+...
                    2*(r*s_d*s_p*c_delta_3n_1 + r*c_d*s_delta_3n_1 - d*s_d*c_p - r*s_delta_3n_1)*(-r*c_delta_3n_1*c_d*c_p - d*c_d*s_p)+...
                    2*(r*s_d*s_delta_3n_1 - r*c_delta_3n_1*c_d*s_p + d*c_d*c_p + d)*( r*c_d*s_delta_3n_1 + r*c_delta_3n_1*s_d*s_p - d*s_d*c_p));  
                
       dl_3n_2_dp=0.5*((d*s_p + r*c_p*c_delta_3n_2 - r*c_delta_3n_2)^2+...
                    (r*s_d*s_p*c_delta_3n_2 + r*c_d*s_delta_3n_2 - d*s_d*c_p - r*s_delta_3n_2)^2+...
                    (r*s_d*s_delta_3n_2 - r*c_delta_3n_2*c_d*s_p + d*c_d*c_p + d)^2)^(-0.5)*...
                    (2*(d*s_p + r*c_p*c_delta_3n_2 - r*c_delta_3n_2)*(d*c_p - r*s_p*c_delta_3n_2 - r*c_delta_3n_2)+...
                    2*(r*s_d*s_p*c_delta_3n_2 + r*c_d*s_delta_3n_2 - d*s_d*c_p - r*s_delta_3n_2)*(r*c_delta_3n_2*s_d*c_p + d*s_d*s_p)+...
                    2*(r*s_d*s_delta_3n_2 - r*c_delta_3n_2*c_d*s_p + d*c_d*c_p + d)*(-r*c_d*c_p*c_delta_3n_2 - d*c_d*s_p));
                
       dl_3n_2_dd=0.5*((d*s_p + r*c_p*c_delta_3n_2 - r*c_delta_3n_2)^2+...
                    (r*s_d*s_p*c_delta_3n_2 + r*c_d*s_delta_3n_2 - d*s_d*c_p - r*s_delta_3n_2)^2+...
                    (r*s_d*s_delta_3n_2 - r*c_delta_3n_2*c_d*s_p + d*c_d*c_p + d)^2)^(-0.5)*...
                    (2*(d*s_p + r*c_p*c_delta_3n_2 - r*c_delta_3n_2)*(0)+...
                    2*(r*s_d*s_p*c_delta_3n_2 + r*c_d*s_delta_3n_2 - d*s_d*c_p - r*s_delta_3n_2)*(-r*c_delta_3n_2*c_d*c_p - d*c_d*s_p)+...
                    2*(r*s_d*s_delta_3n_2 - r*c_delta_3n_2*c_d*s_p + d*c_d*c_p + d)*(r*c_d*s_delta_3n_2 + r*c_delta_3n_2*s_d*s_p - d*s_d*c_p));
                
       J=[dl_3n_2_dd dl_3n_2_dp;...
          dl_3n_1_dd dl_3n_1_dp;...
          dl_3n_0_dd dl_3n_0_dp];
       J_inv=pinv(J);
       
       delta_phi= J_inv*delta_l;
       phi_j=phi_j+delta_phi;
       
       if j==10000
           phi_d(n)=NaN;
           phi_p(n)=NaN;
       end
   end
   
end